<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find dvrk_model)/launch/empty_world.launch">
    <arg name="world_name" value="$(find dvrk_model)/launch/davinci.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

<param name="robot_description" command="$(find xacro)/xacro.py '$(find dvrk_model)/model/wsn_both_psms_rotated.urdf.xacro'" />

<!-- Spawn a robot into Gazebo -->
<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model davinci" />

  <!-- ros_control launch file -->
  <include file="$(find dvrk_model)/launch/davinci_control_both.launch">
 </include>

<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>
<param name="rate" value="100" />

<node pkg="tf" type="static_transform_publisher" name="rcamera_frame_bdcst" args="0 0 0 -1.5708 0 -1.5708   right_camera_link right_camera_optical_frame 50"/>
<node pkg="tf" type="static_transform_publisher" name="lcamera_frame_bdcst" args="0 0 0 -1.5708 0 -1.5708   left_camera_link left_camera_optical_frame 50"/>

<!-- node pkg="tf" type="static_transform_publisher" name="rcamera_frame_bdcst" args="0 0 0.017355 -1.5708 0 -1.5708   right_camera_link right_camera_optical_frame 50"/-->
<!-- node pkg="tf" type="static_transform_publisher" name="lcamera_frame_bdcst" args="0 0 0.017355 -1.5708 0 -1.5708   left_camera_link left_camera_optical_frame 50"/-->

<!-- may need additional transforms to line up video, which is slightly shifted from point cloud; comment out for now  -->
<!--node pkg="tf" type="static_transform_publisher" name="camera_depth_frame" args="0.000 -0.020 0.000 0.000 0.000 0.000 1.000  $(arg camera_name)/camera_link $(arg camera_name)/camera_depth_frame 100"/-->

<!--node pkg="tf" type="static_transform_publisher" name="camera_depth_optical_frame" args="0.000 -0.020 0.000 -0.500 0.500 -0.500 0.500 $(arg camera_name)/camera_link $(arg camera_name)/camera_depth_optical_frame 100"/-->

<!--node pkg="tf" type="static_transform_publisher" name="camera_rgb_frame" args="0.000 -0.045 0.000 0.000 0.000 0.000 1.000 $(arg camera_name)/camera_link $(arg camera_name)/camera_rgb_frame 100"/-->

<!--node pkg="tf" type="static_transform_publisher" name="camera_rgb_optical_frame" args="0.000 -0.045 0.000 -0.500 0.500 -0.500 0.500  $(arg camera_name)/camera_link $(arg camera_name)/camera_rgb_optical_frame 100"/-->
 
<!-- start the trajectory interpolation action server-->
<node name="davinci_traj_interpolator_as" pkg="davinci_traj_streamer" type="davinci_traj_interpolator_as" output="screen"></node>

<!-- start the viable-exit-point computer node-->
<node name="needle_planner_exit_point_evaluator" pkg="needle_planner" type="needle_planner_exit_point_evaluator" output="screen"></node>

<!-- start the needle-motion planner node-->
<node name="needle_plan_horiz_kvec" pkg="needle_planner" type="needle_plan_horiz_kvec" output="screen"></node>

 <include file="$(find dvrk_model)/launch/davinci_endo_sim.launch">
 </include> 

  <include file="$(find dvrk_model)/launch/davinci_endo_view.launch">
 </include> 

<!-- launch rviz using a specific config file -->
 <node pkg="rviz" type="rviz" name="rviz" args="-d $(find dvrk_model)/launch/davinci.rviz"/>

<!-- launch rqt_reconfigure to set disparity params: had some trouble with this; race condition?  -->
 <!--node pkg="rqt_reconfigure" type="rqt_reconfigure" name="rqt_reconfigure"/-->

</launch>
